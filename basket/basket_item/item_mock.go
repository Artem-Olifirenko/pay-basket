// Code generated by MockGen. DO NOT EDIT.
// Source: item.go

// Package basket_item is a generated GoMock package.
package basket_item

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	catalog_types "go.citilink.cloud/catalog_types"
	v1 "go.citilink.cloud/order/internal/specs/grpcclient/gen/citilink/profile/user/v1"
	store_types "go.citilink.cloud/store_types"
)

// MockItemFactory is a mock of ItemFactory interface.
type MockItemFactory struct {
	ctrl     *gomock.Controller
	recorder *MockItemFactoryMockRecorder
}

// MockItemFactoryMockRecorder is the mock recorder for MockItemFactory.
type MockItemFactoryMockRecorder struct {
	mock *MockItemFactory
}

// NewMockItemFactory creates a new mock instance.
func NewMockItemFactory(ctrl *gomock.Controller) *MockItemFactory {
	mock := &MockItemFactory{ctrl: ctrl}
	mock.recorder = &MockItemFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemFactory) EXPECT() *MockItemFactoryMockRecorder {
	return m.recorder
}

// Creatable mocks base method.
func (m *MockItemFactory) Creatable(itemType Type) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creatable", itemType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Creatable indicates an expected call of Creatable.
func (mr *MockItemFactoryMockRecorder) Creatable(itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creatable", reflect.TypeOf((*MockItemFactory)(nil).Creatable), itemType)
}

// Create mocks base method.
func (m *MockItemFactory) Create(ctx context.Context, itemId ItemId, spaceId store_types.SpaceId, itemType Type, count int, parentItem *Item, priceColumn catalog_types.PriceColumn, user *v1.User, ignoreFairPrice bool) (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, itemId, spaceId, itemType, count, parentItem, priceColumn, user, ignoreFairPrice)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemFactoryMockRecorder) Create(ctx, itemId, spaceId, itemType, count, parentItem, priceColumn, user, ignoreFairPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemFactory)(nil).Create), ctx, itemId, spaceId, itemType, count, parentItem, priceColumn, user, ignoreFairPrice)
}

// MockXItemer is a mock of XItemer interface.
type MockXItemer struct {
	ctrl     *gomock.Controller
	recorder *MockXItemerMockRecorder
}

// MockXItemerMockRecorder is the mock recorder for MockXItemer.
type MockXItemerMockRecorder struct {
	mock *MockXItemer
}

// NewMockXItemer creates a new mock instance.
func NewMockXItemer(ctrl *gomock.Controller) *MockXItemer {
	mock := &MockXItemer{ctrl: ctrl}
	mock.recorder = &MockXItemerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXItemer) EXPECT() *MockXItemerMockRecorder {
	return m.recorder
}

// ToXItem mocks base method.
func (m *MockXItemer) ToXItem() *XItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToXItem")
	ret0, _ := ret[0].(*XItem)
	return ret0
}

// ToXItem indicates an expected call of ToXItem.
func (mr *MockXItemerMockRecorder) ToXItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToXItem", reflect.TypeOf((*MockXItemer)(nil).ToXItem))
}

// MockXItemRecursiver is a mock of XItemRecursiver interface.
type MockXItemRecursiver struct {
	ctrl     *gomock.Controller
	recorder *MockXItemRecursiverMockRecorder
}

// MockXItemRecursiverMockRecorder is the mock recorder for MockXItemRecursiver.
type MockXItemRecursiverMockRecorder struct {
	mock *MockXItemRecursiver
}

// NewMockXItemRecursiver creates a new mock instance.
func NewMockXItemRecursiver(ctrl *gomock.Controller) *MockXItemRecursiver {
	mock := &MockXItemRecursiver{ctrl: ctrl}
	mock.recorder = &MockXItemRecursiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXItemRecursiver) EXPECT() *MockXItemRecursiverMockRecorder {
	return m.recorder
}

// ToXItems mocks base method.
func (m *MockXItemRecursiver) ToXItems() []*XItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToXItems")
	ret0, _ := ret[0].([]*XItem)
	return ret0
}

// ToXItems indicates an expected call of ToXItems.
func (mr *MockXItemRecursiverMockRecorder) ToXItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToXItems", reflect.TypeOf((*MockXItemRecursiver)(nil).ToXItems))
}

// MockSpecer is a mock of Specer interface.
type MockSpecer struct {
	ctrl     *gomock.Controller
	recorder *MockSpecerMockRecorder
}

// MockSpecerMockRecorder is the mock recorder for MockSpecer.
type MockSpecerMockRecorder struct {
	mock *MockSpecer
}

// NewMockSpecer creates a new mock instance.
func NewMockSpecer(ctrl *gomock.Controller) *MockSpecer {
	mock := &MockSpecer{ctrl: ctrl}
	mock.recorder = &MockSpecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecer) EXPECT() *MockSpecerMockRecorder {
	return m.recorder
}

// Spec mocks base method.
func (m *MockSpecer) Spec() *Spec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec")
	ret0, _ := ret[0].(*Spec)
	return ret0
}

// Spec indicates an expected call of Spec.
func (mr *MockSpecerMockRecorder) Spec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockSpecer)(nil).Spec))
}
