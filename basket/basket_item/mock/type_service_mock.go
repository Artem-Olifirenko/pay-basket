// Code generated by MockGen. DO NOT EDIT.
// Source: type_service.go

// Package basket_item_mock is a generated GoMock package.
package basket_item_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	basket_item "go.citilink.cloud/order/internal/order/basket/basket_item"
	store_types "go.citilink.cloud/store_types"
)

// MockTypeService is a mock of TypeService interface.
type MockTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockTypeServiceMockRecorder
}

// MockTypeServiceMockRecorder is the mock recorder for MockTypeService.
type MockTypeServiceMockRecorder struct {
	mock *MockTypeService
}

// NewMockTypeService creates a new mock instance.
func NewMockTypeService(ctrl *gomock.Controller) *MockTypeService {
	mock := &MockTypeService{ctrl: ctrl}
	mock.recorder = &MockTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypeService) EXPECT() *MockTypeServiceMockRecorder {
	return m.recorder
}

// Determine mocks base method.
func (m *MockTypeService) Determine(ctx context.Context, spaceId store_types.SpaceId, serviceId basket_item.ItemId, itemGroup basket_item.Group, getToConfiguration bool) (basket_item.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Determine", ctx, spaceId, serviceId, itemGroup, getToConfiguration)
	ret0, _ := ret[0].(basket_item.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Determine indicates an expected call of Determine.
func (mr *MockTypeServiceMockRecorder) Determine(ctx, spaceId, serviceId, itemGroup, getToConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Determine", reflect.TypeOf((*MockTypeService)(nil).Determine), ctx, spaceId, serviceId, itemGroup, getToConfiguration)
}
