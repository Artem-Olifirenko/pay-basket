// Code generated by MockGen. DO NOT EDIT.
// Source: actualizer.go
//
// Generated by this command:
//
//	mockgen -source=actualizer.go -destination=actualizer_mock.go -package=basket
//
// Package basket is a generated GoMock package.
package basket

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	basket_item "go.citilink.cloud/order/internal/order/basket/basket_item"
)

// MockActualizerItem is a mock of ActualizerItem interface.
type MockActualizerItem struct {
	ctrl     *gomock.Controller
	recorder *MockActualizerItemMockRecorder
}

// MockActualizerItemMockRecorder is the mock recorder for MockActualizerItem.
type MockActualizerItemMockRecorder struct {
	mock *MockActualizerItem
}

// NewMockActualizerItem creates a new mock instance.
func NewMockActualizerItem(ctrl *gomock.Controller) *MockActualizerItem {
	mock := &MockActualizerItem{ctrl: ctrl}
	mock.recorder = &MockActualizerItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActualizerItem) EXPECT() *MockActualizerItemMockRecorder {
	return m.recorder
}

// GetCount mocks base method.
func (m *MockActualizerItem) GetCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount.
func (mr *MockActualizerItemMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockActualizerItem)(nil).GetCount))
}

// GetItemId mocks base method.
func (m *MockActualizerItem) GetItemId() basket_item.ItemId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemId")
	ret0, _ := ret[0].(basket_item.ItemId)
	return ret0
}

// GetItemId indicates an expected call of GetItemId.
func (mr *MockActualizerItemMockRecorder) GetItemId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemId", reflect.TypeOf((*MockActualizerItem)(nil).GetItemId))
}

// GetName mocks base method.
func (m *MockActualizerItem) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockActualizerItemMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockActualizerItem)(nil).GetName))
}

// GetNotExist mocks base method.
func (m *MockActualizerItem) GetNotExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetNotExist indicates an expected call of GetNotExist.
func (mr *MockActualizerItemMockRecorder) GetNotExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotExist", reflect.TypeOf((*MockActualizerItem)(nil).GetNotExist))
}

// GetParentItemId mocks base method.
func (m *MockActualizerItem) GetParentItemId() basket_item.ItemId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentItemId")
	ret0, _ := ret[0].(basket_item.ItemId)
	return ret0
}

// GetParentItemId indicates an expected call of GetParentItemId.
func (mr *MockActualizerItemMockRecorder) GetParentItemId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentItemId", reflect.TypeOf((*MockActualizerItem)(nil).GetParentItemId))
}

// GetPrice mocks base method.
func (m *MockActualizerItem) GetPrice() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockActualizerItemMockRecorder) GetPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockActualizerItem)(nil).GetPrice))
}

// ReduceInfo mocks base method.
func (m *MockActualizerItem) ReduceInfo() ReduceInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceInfo")
	ret0, _ := ret[0].(ReduceInfo)
	return ret0
}

// ReduceInfo indicates an expected call of ReduceInfo.
func (mr *MockActualizerItemMockRecorder) ReduceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceInfo", reflect.TypeOf((*MockActualizerItem)(nil).ReduceInfo))
}

// MockActualizerItems is a mock of ActualizerItems interface.
type MockActualizerItems struct {
	ctrl     *gomock.Controller
	recorder *MockActualizerItemsMockRecorder
}

// MockActualizerItemsMockRecorder is the mock recorder for MockActualizerItems.
type MockActualizerItemsMockRecorder struct {
	mock *MockActualizerItems
}

// NewMockActualizerItems creates a new mock instance.
func NewMockActualizerItems(ctrl *gomock.Controller) *MockActualizerItems {
	mock := &MockActualizerItems{ctrl: ctrl}
	mock.recorder = &MockActualizerItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActualizerItems) EXPECT() *MockActualizerItemsMockRecorder {
	return m.recorder
}

// FindByItem mocks base method.
func (m *MockActualizerItems) FindByItem(item *basket_item.Item) ActualizerItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByItem", item)
	ret0, _ := ret[0].(ActualizerItem)
	return ret0
}

// FindByItem indicates an expected call of FindByItem.
func (mr *MockActualizerItemsMockRecorder) FindByItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByItem", reflect.TypeOf((*MockActualizerItems)(nil).FindByItem), item)
}

// FindByType mocks base method.
func (m *MockActualizerItems) FindByType(itemType basket_item.Type) []ActualizerItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByType", itemType)
	ret0, _ := ret[0].([]ActualizerItem)
	return ret0
}

// FindByType indicates an expected call of FindByType.
func (mr *MockActualizerItemsMockRecorder) FindByType(itemType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByType", reflect.TypeOf((*MockActualizerItems)(nil).FindByType), itemType)
}

// MockReduceInfo is a mock of ReduceInfo interface.
type MockReduceInfo struct {
	ctrl     *gomock.Controller
	recorder *MockReduceInfoMockRecorder
}

// MockReduceInfoMockRecorder is the mock recorder for MockReduceInfo.
type MockReduceInfoMockRecorder struct {
	mock *MockReduceInfo
}

// NewMockReduceInfo creates a new mock instance.
func NewMockReduceInfo(ctrl *gomock.Controller) *MockReduceInfo {
	mock := &MockReduceInfo{ctrl: ctrl}
	mock.recorder = &MockReduceInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReduceInfo) EXPECT() *MockReduceInfoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockReduceInfo) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockReduceInfoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockReduceInfo)(nil).Count))
}

// Info mocks base method.
func (m *MockReduceInfo) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockReduceInfoMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockReduceInfo)(nil).Info))
}
