// Code generated by MockGen. DO NOT EDIT.
// Source: refresher_composite.go
//
// Generated by this command:
//
//	mockgen -source=refresher_composite.go -destination=refresher_composite_mock.go -package=basket
//
// Package basket is a generated GoMock package.
package basket

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	basket_item "go.citilink.cloud/order/internal/order/basket/basket_item"
	zap "go.uber.org/zap"
)

// Mockrefresher is a mock of refresher interface.
type Mockrefresher struct {
	ctrl     *gomock.Controller
	recorder *MockrefresherMockRecorder
}

// MockrefresherMockRecorder is the mock recorder for Mockrefresher.
type MockrefresherMockRecorder struct {
	mock *Mockrefresher
}

// NewMockrefresher creates a new mock instance.
func NewMockrefresher(ctrl *gomock.Controller) *Mockrefresher {
	mock := &Mockrefresher{ctrl: ctrl}
	mock.recorder = &MockrefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrefresher) EXPECT() *MockrefresherMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *Mockrefresher) Refresh(ctx context.Context, items []*basket_item.Item, bsk RefresherBasket, logger *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, items, bsk, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockrefresherMockRecorder) Refresh(ctx, items, bsk, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*Mockrefresher)(nil).Refresh), ctx, items, bsk, logger)
}

// Refreshable mocks base method.
func (m *Mockrefresher) Refreshable(item *basket_item.Item) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refreshable", item)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Refreshable indicates an expected call of Refreshable.
func (mr *MockrefresherMockRecorder) Refreshable(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refreshable", reflect.TypeOf((*Mockrefresher)(nil).Refreshable), item)
}
